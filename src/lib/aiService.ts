
import { filterDestinations } from '@/data/destinations';

export interface ChatMessage {
  id: string;
  role: 'user' | 'ai';
  content: string;
  timestamp: Date;
}

export interface UserPreferences {
  interests: string[];
  preferredActivities: string[];
  travelStyle: string;
  budget: string;
  budgetValue?: number;
  duration?: string;
  season?: string;
}

// Cache para evitar respostas repetitivas
let lastResponseType: string | null = null;
let conversationContext: string[] = [];

// Simulador de chat com IA para gerar respostas mais inteligentes
export const generateAIResponse = async (
  messages: ChatMessage[],
  preferences: UserPreferences
): Promise<string> => {
  // Simula um pequeno atraso para parecer mais natural
  await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 400));
  
  // Pega a √∫ltima mensagem do usu√°rio
  const lastUserMessage = [...messages].reverse().find(msg => msg.role === 'user')?.content.toLowerCase();
  
  if (!lastUserMessage) {
    return "Ol√°! Sou o ExplorAI, seu assistente de viagens personalizadas. Como posso ajudar voc√™ hoje?";
  }

  // Atualiza o contexto da conversa
  conversationContext.push(lastUserMessage);
  if (conversationContext.length > 5) {
    conversationContext = conversationContext.slice(-5);
  }

  // Verifica se h√° prefer√™ncias configuradas
  const hasPreferences = preferences.interests.length > 0 || preferences.preferredActivities.length > 0;
  
  console.log('Prefer√™ncias do usu√°rio:', preferences);
  console.log('Mensagem do usu√°rio:', lastUserMessage);
  console.log('Tem prefer√™ncias:', hasPreferences);

  // An√°lise contextual da mensagem
  const isAskingForDestinations = /(?:destino|viajar|recomen|sugest|lugar|onde|pa√≠s|cidade)/i.test(lastUserMessage);
  const isAskingAboutBudget = /(?:or√ßamento|dinheiro|custo|pre√ßo|valor|gasto)/i.test(lastUserMessage);
  const isAskingAboutTime = /(?:tempo|dias|dura√ß√£o|per√≠odo|quando|√©poca)/i.test(lastUserMessage);
  const isGreeting = /(?:oi|ol√°|hello|bom dia|boa tarde|boa noite)/i.test(lastUserMessage);
  const isSharingPreferences = /(?:gosto|prefiro|amo|adoro|interesse|paix√£o)/i.test(lastUserMessage);

  // Respostas baseadas no contexto e prefer√™ncias
  if (isGreeting && lastResponseType !== 'greeting') {
    lastResponseType = 'greeting';
    if (hasPreferences) {
      return `Ol√°! Que bom te ver novamente! Vejo que voc√™ j√° configurou suas prefer√™ncias - ${preferences.interests.join(', ')} s√£o √≥timas escolhas! Como posso ajudar voc√™ a encontrar o destino perfeito hoje?`;
    }
    return "Ol√°! Bem-vindo ao ExplorAI! Para come√ßar, que tal me contar o que voc√™ mais gosta em uma viagem? Praia, montanha, cultura, gastronomia...?";
  }

  if (isAskingForDestinations) {
    lastResponseType = 'destinations';
    
    if (hasPreferences) {
      const destinations = filterDestinations(preferences);
      
      if (destinations.length > 0) {
        const topDestinations = destinations.slice(0, 3);
        let response = `Perfeito! Baseado em suas prefer√™ncias (${preferences.interests.join(', ')}) e atividades favoritas (${preferences.preferredActivities.join(', ')}), encontrei alguns destinos incr√≠veis:\n\n`;
        
        topDestinations.forEach((dest, index) => {
          response += `${index + 1}. **${dest.name}, ${dest.country}** - ${dest.description.substring(0, 100)}...\n`;
        });
        
        // Adiciona informa√ß√£o sobre or√ßamento
        if (preferences.budgetValue) {
          const budgetInfo = getBudgetAdvice(preferences.budgetValue, topDestinations[0].averageCost);
          response += `\nüí∞ ${budgetInfo}`;
        }
        
        // Adiciona informa√ß√£o sobre temporada
        if (preferences.season && preferences.season !== 'qualquer') {
          response += `\nüå§Ô∏è Para sua prefer√™ncia de viajar no ${preferences.season}, ${topDestinations[0].name} √© uma excelente escolha!`;
        }
        
        response += "\n\nQue tal explorar mais detalhes sobre algum desses destinos?";
        return response;
      } else {
        return "Hmm, com suas prefer√™ncias espec√≠ficas, preciso expandir um pouco a busca. Que tal me contar se voc√™ estaria aberto a explorar algo um pouco diferente do usual? √Äs vezes os melhores destinos s√£o aqueles que nos surpreendem!";
      }
    } else {
      return "Adoraria recomendar destinos perfeitos para voc√™! Mas primeiro, me conta: voc√™ prefere aventura ou relaxamento? Praia ou montanha? E qual seu or√ßamento aproximado por pessoa? Isso me ajuda a encontrar exatamente o que voc√™ procura! üéØ";
    }
  }

  if (isAskingAboutBudget && lastResponseType !== 'budget') {
    lastResponseType = 'budget';
    if (preferences.budgetValue) {
      const category = getBudgetCategory(preferences.budgetValue);
      return `Pelo seu or√ßamento de R$ ${preferences.budgetValue.toLocaleString('pt-BR')} por pessoa, voc√™ est√° na categoria "${category}". Isso te d√° ${getBudgetPossibilities(category)}. Quer saber quais destinos cabem perfeitamente nesse or√ßamento?`;
    }
    return "O or√ßamento √© super importante para escolher o destino ideal! Pode me dizer quanto voc√™ pretende gastar por pessoa? Assim posso recomendar lugares que v√£o te dar o m√°ximo de experi√™ncia pelo seu investimento! üí∏";
  }

  if (isAskingAboutTime && lastResponseType !== 'time') {
    lastResponseType = 'time';
    if (preferences.duration) {
      return `${preferences.duration} √© um per√≠odo excelente! ${getTimeAdvice(preferences.duration)} Considerando esse tempo, que tipo de experi√™ncia voc√™ quer priorizar?`;
    }
    return "A dura√ß√£o da viagem faz toda diferen√ßa no planejamento! Voc√™ est√° pensando em quantos dias? Um final de semana, uma semana, ou uma aventura mais longa?";
  }

  if (isSharingPreferences && lastResponseType !== 'preferences') {
    lastResponseType = 'preferences';
    const newInfo = extractPreferencesFromMessage(lastUserMessage);
    return `Que legal! ${newInfo} Isso me ajuda muito a entender seu perfil de viajante. ${getPersonalizedQuestion(preferences, lastUserMessage)}`;
  }

  // Perguntas contextuais baseadas no que j√° sabemos
  if (hasPreferences) {
    const missingInfo = getMissingPreferences(preferences);
    if (missingInfo.length > 0) {
      return `√ìtimo! J√° sei bastante sobre suas prefer√™ncias. ${missingInfo[0]} Isso vai me ajudar a refinar ainda mais as recomenda√ß√µes!`;
    }
  }

  // Respostas variadas para manter a conversa fluida
  const contextualResponses = [
    "Interessante! Me conta mais sobre isso. O que mais te atrai em uma viagem?",
    "Entendi! E voc√™ prefere destinos mais movimentados ou lugares mais tranquilos?",
    "Que legal! Voc√™ j√° pensou em explorar destinos fora do √≥bvio? √Äs vezes as melhores experi√™ncias est√£o nos lugares menos esperados!",
    "Hmm, e quando voc√™ viaja, prefere relaxar ou ter uma agenda cheia de atividades?",
  ];

  // Evita repetir a mesma resposta
  const availableResponses = contextualResponses.filter(resp => 
    !conversationContext.some(ctx => resp.toLowerCase().includes(ctx.substring(0, 10)))
  );

  return availableResponses.length > 0 
    ? availableResponses[Math.floor(Math.random() * availableResponses.length)]
    : "Conte-me mais sobre o que voc√™ procura em uma viagem ideal!";
};

// Fun√ß√µes auxiliares para respostas mais inteligentes
function getBudgetCategory(value: number): string {
  if (value < 2000) return 'econ√¥mico';
  if (value < 5000) return 'moderado';
  if (value < 15000) return 'confort√°vel';
  if (value < 50000) return 'luxo';
  return 'ultra luxo';
}

function getBudgetAdvice(userBudget: number, destinationCost: string): string {
  const category = getBudgetCategory(userBudget);
  
  const adviceMap: Record<string, Record<string, string>> = {
    'econ√¥mico': {
      'low': 'Perfeito! Seu or√ßamento est√° ideal para este destino.',
      'medium': 'Com planejamento, d√° para aproveitar bem!',
      'high': 'Pode ser um pouco apertado, mas n√£o imposs√≠vel.',
      'very high': 'Talvez seja melhor considerar outras op√ß√µes.'
    },
    'moderado': {
      'low': 'Excelente! Voc√™ ter√° uma margem confort√°vel.',
      'medium': 'Perfeita combina√ß√£o custo-benef√≠cio!',
      'high': 'D√° para aproveitar com um bom planejamento.',
      'very high': 'Pode ser um investimento alto para este perfil.'
    },
    'confort√°vel': {
      'low': 'Voc√™ poder√° se dar alguns luxos extras!',
      'medium': 'Or√ßamento perfeito para uma viagem confort√°vel.',
      'high': 'Consegue aproveitar muito bem tudo que o destino oferece.',
      'very high': 'Uma experi√™ncia premium est√° ao seu alcance!'
    }
  };

  return adviceMap[category]?.[destinationCost] || 'Vamos encontrar op√ß√µes que cabem no seu or√ßamento!';
}

function getBudgetPossibilities(category: string): string {
  const possibilities: Record<string, string> = {
    'econ√¥mico': 'acesso a destinos nacionais incr√≠veis e alguns internacionais com bom planejamento',
    'moderado': 'uma boa variedade de destinos nacionais e internacionais',
    'confort√°vel': 'acesso a destinos premium e experi√™ncias diferenciadas',
    'luxo': 'possibilidades quase ilimitadas para experi√™ncias exclusivas',
    'ultra luxo': 'acesso aos destinos mais exclusivos do mundo'
  };
  
  return possibilities[category] || 'muitas possibilidades interessantes';
}

function getTimeAdvice(duration: string): string {
  const adviceMap: Record<string, string> = {
    '2-3 dias': 'Perfeito para uma escapada! D√° para conhecer bem uma cidade ou regi√£o espec√≠fica.',
    '4-6 dias': 'Tempo ideal para explorar um destino sem pressa, com dias para relaxar tamb√©m.',
    '7-10 dias': 'Dura√ß√£o cl√°ssica! Permite conhecer v√°rias facetas de um pa√≠s ou regi√£o.',
    '11-15 dias': 'Tempo generoso para uma experi√™ncia mais profunda e completa.',
    '15+ dias': 'Uma verdadeira jornada! D√° para explorar m√∫ltiplos destinos ou mergulhar profundamente na cultura local.'
  };
  
  return adviceMap[duration] || '√â um bom per√≠odo para viajar!';
}

function extractPreferencesFromMessage(message: string): string {
  if (message.includes('praia')) return 'Praia √© sempre uma √≥tima escolha!';
  if (message.includes('montanha')) return 'Montanhas oferecem paisagens incr√≠veis!';
  if (message.includes('cultura')) return 'Cultura enriquece muito a experi√™ncia de viagem!';
  if (message.includes('gastronomia')) return 'Gastronomia √© uma das melhores formas de conhecer um lugar!';
  if (message.includes('aventura')) return 'Aventura torna qualquer viagem inesquec√≠vel!';
  return 'Adoro conhecer mais sobre suas prefer√™ncias!';
}

function getPersonalizedQuestion(preferences: UserPreferences, lastMessage: string): string {
  if (preferences.interests.length === 0) {
    return "E me conta, o que mais te emociona em uma viagem: paisagens naturais, hist√≥ria, gastronomia ou algo mais?";
  }
  
  if (!preferences.budgetValue) {
    return "E quanto ao or√ßamento? Isso me ajuda a filtrar as op√ß√µes perfeitas para voc√™!";
  }
  
  if (!preferences.duration || preferences.duration === '') {
    return "Quantos dias voc√™ costuma gostar de viajar?";
  }
  
  return "Com essas informa√ß√µes, j√° posso fazer recomenda√ß√µes bem personalizadas! Quer ver algumas op√ß√µes?";
}

function getMissingPreferences(preferences: UserPreferences): string[] {
  const missing = [];
  
  if (preferences.interests.length === 0) {
    missing.push("Que tipo de experi√™ncias te interessam mais em uma viagem?");
  }
  
  if (!preferences.budgetValue) {
    missing.push("Qual seria seu or√ßamento aproximado por pessoa?");
  }
  
  if (!preferences.duration) {
    missing.push("Por quantos dias voc√™ gostaria de viajar?");
  }
  
  if (preferences.season === 'qualquer') {
    missing.push("Tem alguma √©poca do ano que prefere viajar?");
  }
  
  return missing;
}
